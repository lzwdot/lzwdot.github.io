import{_ as i,c as a,o as n,aj as t,aE as l}from"./chunks/framework.Dc3YHBOS.js";const o=JSON.parse('{"title":"React 的合成事件机制","description":"","frontmatter":{"date":"2022-01-27 16:56:57"},"headers":[],"relativePath":"docs/29356.md","filePath":"docs/3.react-use/react-principle/29356.md","lastUpdated":1735962194000}'),e={name:"docs/29356.md"};function h(k,s,p,E,r,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="react-的合成事件机制" tabindex="-1">React 的合成事件机制 <a class="header-anchor" href="#react-的合成事件机制" aria-label="Permalink to “React 的合成事件机制”">​</a></h1><p>合成事件</p><ul><li>所有事件挂载到 document（或 root 元素）上</li><li>event 不是原生的，是 SyntheticEvent 合成事件对象</li><li>和 Vue 事件不同，和 DOM 事件也不同</li></ul><blockquote><p>event 是 SyntheticBaseEvent，模拟出来 DOM 事件所有能力</p></blockquote><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取 event</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clickHandler3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preventDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止默认行为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  e.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stopPropagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 阻止冒泡</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;target&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.target); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指向当前元素，即当前元素触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;current target&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.currentTarget); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指向当前元素，假象！</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 注意，event 其实就是 React 封装的，可以看 __proto__.constructor 是 SyntheticBaseEvent 组合事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不是原生的 Event，原生的是 MouseEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;event.__proto__.constructor&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">__proto__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 原生 event 如下，其 __proto__.constructor 是 MouseEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nativeEvent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.nativeEvent);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nativeEvent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.nativeEvent.target); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指向当前元素，即当前元素触发</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nativeEvent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, e.nativeEvent.currentTarget); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指向 root 元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1、event 是 SyntheticBaseEvent，模拟出来 DOM 事件所有能力</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2、e.nativeEvent 是原生事件对象</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 3、所有的事件，挂载到 root 元素</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 4、和 DOM 事件不一样，和 Vue 事件也不一样</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>流程图 <img src="`+l+'" alt="react" loading="lazy"></p><p>为何要合成事件机制？</p><ul><li>更好的兼容性和跨平台</li><li>挂载到 document（或 root 元素），减少内存消耗，避免频繁解绑</li><li>方便事件的统一管理（如事物机制）</li></ul><p>React 17 事件绑定到 root 组件</p><ul><li>React 16 绑定 document</li><li>React 17 事件绑定到 root 组件</li><li>这样改进有利于多个 React 版本并存，例如微前端</li></ul>',10)])])}const c=i(e,[["render",h]]);export{o as __pageData,c as default};
