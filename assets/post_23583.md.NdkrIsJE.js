import{_ as i,c as a,o as t,aj as e}from"./chunks/framework.Dc3YHBOS.js";const c=JSON.parse('{"title":"Security AppScan Standard常见漏洞","description":"","frontmatter":{"date":"2019-08-12 15:43:00","author":"lzw"},"headers":[],"relativePath":"post/23583.md","filePath":"post/2019/08/23583.md","lastUpdated":1710426988000}'),n={name:"post/23583.md"};function h(p,s,l,k,r,o){return t(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="security-appscan-standard常见漏洞" tabindex="-1">Security AppScan Standard常见漏洞 <a class="header-anchor" href="#security-appscan-standard常见漏洞" aria-label="Permalink to “Security AppScan Standard常见漏洞”">​</a></h1><h2 id="已启用目录" tabindex="-1">已启用目录 <a class="header-anchor" href="#已启用目录" aria-label="Permalink to “已启用目录”">​</a></h2><p>需要关闭目录浏览索引</p><p><strong>Apache</strong>， 进入 apache 的配置文件 <code>httpd.conf</code> 修改</p><div class="language-apache"><button title="Copy Code" class="copy"></button><span class="lang">apache</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DocumentRoot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &quot;E:/www&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Directory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;E:/www&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #Options Indexes FollowSymLinks Includes ExecCGI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FollowSymLinks Includes ExecCGI #去掉Indexes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><strong>Nginx</strong>， 编辑 nginx 配置文件 <code>nginx.conf</code>，修改</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">autoindex </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#开启nginx目录浏览功能,on为开启,off为关闭</span></span></code></pre></div><p>以上都需要重载配置文件，才生效</p><h2 id="加密会话-ssl-cookie-中缺少-secure-属性-php" tabindex="-1">加密会话（SSL）Cookie 中缺少 Secure 属性（PHP） <a class="header-anchor" href="#加密会话-ssl-cookie-中缺少-secure-属性-php" aria-label="Permalink to “加密会话（SSL）Cookie 中缺少 Secure 属性（PHP）”">​</a></h2><p>使用 https 访问时， 需要给 cookie 加上 Secure 和 HttpOnly 属性， 但需要注意：</p><blockquote><p>设置 HttpOnly=true 的 cookie 不能被 js 获取到，无法用 document.cookie 打出 cookie 的内容。</p></blockquote><h4 id="_1-设置-secure" tabindex="-1">1. 设置 secure <a class="header-anchor" href="#_1-设置-secure" aria-label="Permalink to “1. 设置 secure”">​</a></h4><p>可以看到,只要在 <strong>setcookie</strong> 第六个参数设置为 true, 就可以了</p><h4 id="_2-设置-httponly" tabindex="-1">2. 设置 httponly <a class="header-anchor" href="#_2-设置-httponly" aria-label="Permalink to “2. 设置 httponly”">​</a></h4><p>在 5.1 和之前的版本在 header 设置</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Set-Cookie: hidden=value; httpOnly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>在 5.2 和更高的版本，Cookie 参数可以在 php.ini 文件中定义，如果需要设置有几个选择</p><p><strong>1. 修改php全局配置</strong></p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1) 直接修改php.ini文件</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">session</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cookie_httponly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#2) 此配置可以在php代码中使用\`ini_set\`函数设置</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ini_set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;session.cookie_httponly&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#3)，在调用 session_start()之前调用 session_set_cookie_params()函数设置</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">php</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($time </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, $ses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;MYSES&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    session_set_cookie_params</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($time);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    session_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($ses);</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    session_start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($_COOKIE[$ses]))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      #第五个参数 设置为true</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      setcookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($ses, $_COOKIE[$ses], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">time</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $time, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?&gt;</span></span></code></pre></div><p><a href="https://php.net/manual/zh/function.session-set-cookie-params.php" target="_blank" rel="noreferrer">session_set_cookie_params()</a>函数<a href="https://php.net/manual/zh/function.session-start.php" target="_blank" rel="noreferrer">session_start()</a> 函数</p><p><strong>2. 在设置cookie时直接指定httponly</strong></p><p>前面介绍在setcookie函数第7个参数 <strong>httponly</strong> 设置为 true 即可.</p><blockquote><p>注意事项</p><p>setcookie的httponly参数 在 5.2.0 版本开始才有</p></blockquote><p>参考：<a href="https://www.jianshu.com/p/87a72c26db2a" target="_blank" rel="noreferrer">https://www.jianshu.com/p/87a72c26db2a</a></p><h2 id="不安全的http方法" tabindex="-1">不安全的HTTP方法 <a class="header-anchor" href="#不安全的http方法" aria-label="Permalink to “不安全的HTTP方法”">​</a></h2><p>只允许 post，get 的 http 方法</p><p><strong>Apache</strong>在 <code>httpd.conf</code> 添加如下配置：</p><div class="language-apache"><button title="Copy Code" class="copy"></button><span class="lang">apache</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Location</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   AllowMethods GET POST</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>参考：<a href="https://httpd.apache.org/docs/2.4/mod/mod_allowmethods.html" target="_blank" rel="noreferrer">https://httpd.apache.org/docs/2.4/mod/mod_allowmethods.html</a></p><p><strong>Nginx</strong>在 <code>nginx.conf</code> 中进行如下设置</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ($request_method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!~ </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">^(GET|HEAD|POST)$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 403</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="服务器端banner泄漏" tabindex="-1">服务器端Banner泄漏 <a class="header-anchor" href="#服务器端banner泄漏" aria-label="Permalink to “服务器端Banner泄漏”">​</a></h2><p>隐藏 server 信息和版本信息， nginx 配置可以参考这篇文章 <a href="/post/22789">nginx hide service</a></p><p>Apache 配置隐藏版本号， 在 <code>httpd.conf</code> 添加如下配置：</p><div class="language-apache"><button title="Copy Code" class="copy"></button><span class="lang">apache</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 找到ServerTokens和ServerSignature并修改为：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ServerTokens</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  Prod</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ServerSignature</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  off</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果没有找到ServerTokens和ServerSignature可以在最后一行添加</span></span></code></pre></div><p>php 隐藏版本号，在 php.ini 中配置：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">expose_php</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Off</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="使用伪造的-url-设置-referer-头" tabindex="-1">使用伪造的 URL 设置 Referer 头 <a class="header-anchor" href="#使用伪造的-url-设置-referer-头" aria-label="Permalink to “使用伪造的 URL 设置 Referer 头”">​</a></h2><p>将可能干扰 CSRF 攻击的 HTTP 头除去，并使用伪造的 URL 设置 Referer 头进行访问，所以需要验证 Referer 头</p><blockquote><p>这种方式只能起到简单发防护， Referer 头是可以伪造的，更推荐使用 csrf-token 表单方式进行防护</p></blockquote><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  isset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($_SERVER[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP_REFERER&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  strpos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">($_SERVER[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HTTP_REFERER&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], $_SERVER[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;SERVER_NAME&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  exit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;不允许的请求&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="关闭apache下icons目录列表" tabindex="-1">关闭apache下icons目录列表 <a class="header-anchor" href="#关闭apache下icons目录列表" aria-label="Permalink to “关闭apache下icons目录列表”">​</a></h2><p>使用 apache 服务器，当我访问<a href="http://localhost/icons/%E6%97%B6%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%98%BE%E7%A4%BA%E8%BF%99%E4%B8%AA%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%E6%89%80%E4%BB%A5%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8" target="_blank" rel="noreferrer">http://localhost/icons/时会自动显示这个目录下的所以文件列表</a>，出于安全考虑需要关闭目录列表</p><p>目录<code>apache/conf/extra/</code>下的文件 <code>httpd-autoindex.conf</code> 修改</p><div class="language-apache"><button title="Copy Code" class="copy"></button><span class="lang">apache</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Alias</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /icons/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/xampp/apache/icons/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Directory</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/xampp/apache/icons&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #Options Indexes MultiViews</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MultiViews #去掉Indexes</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    AllowOverride</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> None</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    Require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> all granted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="flash-参数-allowscriptaccess-已设置为-always" tabindex="-1">Flash 参数 AllowScriptAccess 已设置为 always <a class="header-anchor" href="#flash-参数-allowscriptaccess-已设置为-always" aria-label="Permalink to “Flash 参数 AllowScriptAccess 已设置为 always”">​</a></h2><p>当显示有这个漏洞时，一般是 js 文件包了 <code>&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;</code> 参数，如<code>ueditor hird-partywebuploaderwebuploader.js</code>文件的大概6472行。一般建议修改为 <code>&lt;param name=&quot;allowscriptaccess&quot; value=&quot;sameDomain&quot; /&gt;</code></p><h2 id="appscan检测到隐藏目录" tabindex="-1">AppScan检测到隐藏目录 <a class="header-anchor" href="#appscan检测到隐藏目录" aria-label="Permalink to “AppScan检测到隐藏目录”">​</a></h2><p>直接访问在站点根目录的 css，images 时，系统可能会返回 <code>403 forbidden</code> ，这时安全软件会觉得是一个不安全的方式配置。可能的话，请发出改用“404 － 找不到”响应状态代码，而不是“403 － 禁止”。这项更改会将站点的目录模糊化，可以防止泄漏站点结构。解决这个问题有两种方式，<strong>方式一是通过自定义 403 错误页面返回 404，即 403 的错误页面找不到</strong>：</p><p><strong>Nginx</strong> 在 server 模块中配置</p><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">location</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> / </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        error_page </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">403</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /404;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>Apache</strong> 在 <code>httpd.conf</code> 文件中配置 <code>ErrorDocument 403 /404</code></p><p><strong>方法二</strong>是在 css，image 等目录中新建一个空白的 <code>index.html</code> 文件即可</p><h2 id="缺少跨帧脚本编制防御" tabindex="-1">缺少跨帧脚本编制防御 <a class="header-anchor" href="#缺少跨帧脚本编制防御" aria-label="Permalink to “缺少跨帧脚本编制防御”">​</a></h2><p>一般使用 X-Frame-Options 防止（限制）在 iFrame 中嵌入页面，配置方法有：</p><p><strong>PHP</strong> 代码 <code>header(&#39;X-Frame-Options:Deny&#39;);</code> 或者 <code>header(&#39;X-Frame-Options:SAMEORIGIN);//觉得用这个比较好</code></p><p><strong>Nginx</strong> 配置 <code>add_header X-Frame-Options SAMEORIGIN</code></p><p><strong>Apache</strong> 配置 <code>Header always append X-Frame-Options SAMEORIGIN</code></p><h2 id="发现可高速缓存的-ssl-页面" tabindex="-1">发现可高速缓存的 SSL 页面 <a class="header-anchor" href="#发现可高速缓存的-ssl-页面" aria-label="Permalink to “发现可高速缓存的 SSL 页面”">​</a></h2><p>一般建议页面标题中的“Cache-Control: no-store”和“Pragma: no-cache”或“Cache-Control: no-cache”响应伪指令来实现此操作，页面添加：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cache-Control&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache, no-store&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Pragma&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre></div><p>告知浏览器不缓存页面；如果需要设置响应过期日期始终为过期，则添加 <code>&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot;&gt;</code> 浏览器会在这段时间之后更新缓存里的页面。如果使用 Laravel 框架，则可以中间件添加：</p><div class="language-php"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $next($request)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cache-Control&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;no-cache, no-store&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pragma&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;no-cache&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="缺少-http-strict-transport-security-头" tabindex="-1">缺少 HTTP Strict-Transport-Security 头 <a class="header-anchor" href="#缺少-http-strict-transport-security-头" aria-label="Permalink to “缺少 HTTP Strict-Transport-Security 头”">​</a></h2><p><strong>Nginx</strong> 配置 <code>add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains&quot; always;</code></p><p><strong>Apache</strong> 配置 <code>Header always set Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot;</code></p><h2 id="缺少-content-security-policy-头" tabindex="-1">缺少“Content-Security-Policy”头 <a class="header-anchor" href="#缺少-content-security-policy-头" aria-label="Permalink to “缺少“Content-Security-Policy”头”">​</a></h2><p><strong>页面</strong> 添加 <code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code></p><p><strong>Nginx</strong> 配置 <code>add_header Content-Security-Policy &quot;upgrade-insecure-requests;connect-src *&quot;;</code></p><p><strong>Apache</strong> 配置 <code>Header set Content-Security-Policy &quot;default-src &#39;self&#39;;&quot;</code></p><p>参考：</p><p><a href="https://www.uedbox.com/post/56310/" target="_blank" rel="noreferrer">https://www.uedbox.com/post/56310/</a></p><p><a href="https://www.cnblogs.com/hustskyking/p/upgrade-insecure-requests.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/hustskyking/p/upgrade-insecure-requests.html</a></p><h2 id="缺少-x-content-type-options-头" tabindex="-1">缺少“X-Content-Type-Options”头 <a class="header-anchor" href="#缺少-x-content-type-options-头" aria-label="Permalink to “缺少“X-Content-Type-Options”头”">​</a></h2><p><strong>Nginx</strong> 配置 <code>add_header X-Content-Type-Options nosniff;</code></p><p><strong>Apache</strong> 配置 <code>Header always set X-Content-Type-Options nosniff</code></p><h2 id="缺少-x-xss-protection-头" tabindex="-1">缺少“X-XSS-Protection”头 <a class="header-anchor" href="#缺少-x-xss-protection-头" aria-label="Permalink to “缺少“X-XSS-Protection”头”">​</a></h2><p><strong>页面</strong>设置 <code>&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;X-XSS-Protection:1;mode=block&quot; /&gt;</code></p><p><strong>Nginx</strong> 配置 <code>add_header X-XSS-Protection &quot;1; mode=block&quot;;</code></p><p><strong>Apache</strong> <code>配置 Header always append X-XSS-Protection &quot;1;mode=block&quot;</code></p><blockquote><p>关于添加 HTTP 头部设，Nginx 可以参考 <a href="https://www.jdon.com/idea/htmlcss/7-http-headers-to-secure-your-app.html" target="_blank" rel="noreferrer">https://www.jdon.com/idea/htmlcss/7-http-headers-to-secure-your-app.html</a> ，Apache 可以参考 <a href="http://itindex.net/detail/52305-apache-header-%E5%AE%89%E5%85%A8" target="_blank" rel="noreferrer">http://itindex.net/detail/52305-apache-header-%E5%AE%89%E5%85%A8</a></p></blockquote>`,81)])])}const g=i(n,[["render",h]]);export{c as __pageData,g as default};
